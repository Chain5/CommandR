node {
    
    def pathToServicePom = 'commander-service/pom.xml'
    
    try {
        stage("SCM") {
            checkout scm
        }
        
        stage("Service - Build") {
            runCleanInstall(pathToServicePom)
        }
        
        stage("Service - Unit tests") {
            runUnitTests(pathToServicePom)
        }
        
        stage("Service - Sonarqube Quality Check") {
            runSonarqube(pathToServicePom)
        }
        
    } catch (err) {
        currentBuild.result = 'FAILURE'
        println("CausedBy: " + err);
    } finally {
        if (currentBuild.result == null) {
            currentBuild.result = 'SUCCESS'
        }
        stage('Slack notification') {
            println("RESULT: " + currentBuild.result);
        }
    }
}

def runCleanInstall(pathToPom) {
    timeout(time: 300, unit: 'SECONDS') {
        withMaven(maven: 'maven-3.3.9',
                mavenOpts: '-Xmx512m -XX:MaxPermSize=1024m'
        ) {
            if (isUnix()) {
                sh "mvn -f ${pathToPom} clean install -B -U -DskipTests"
            } else {
                bat(/"mvn" -f ${pathToPom} clean install -B -U -DskipTests/)
            }
        }
    }
}

def runUnitTests(pathToPom) {
    timeout(time: 600, unit: 'SECONDS') {
        withMaven(maven: 'maven-3.3.9',
                mavenOpts: '-Xmx512m -XX:MaxPermSize=1024m'
        ) {
            if (isUnix()) {
                sh "mvn -f ${pathToPom} test  -B -U -Dsurefire.useFile=true"
            } else {
                bat(/"mvn" -f ${pathToPom} test  -B -U -Dsurefire.useFile=true/)
            }
        }
    }
}

def runSonarqube(pathToPom) {
    timeout(time: 300, unit: 'SECONDS') {
        def scannerHome = tool 'SonarQube';
        withSonarQubeEnv('SonarQube') {
            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=Sonar_CommandR"
        }
    }
}
